name: Build and Deploy (GitHub Pages)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # Do NOT set "cache" here; we handle caching below conditionally.

      - name: Detect package manager
        id: pm
        run: |
          # Detect lockfile and set PM + LOCKFILE env
          if [ -f pnpm-lock.yaml ]; then
            echo "pm=pnpm" >> $GITHUB_OUTPUT
            echo "lockfile=pnpm-lock.yaml" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "pm=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f package-lock.json ]; then
            echo "pm=npm" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
          else
            echo "pm=npm" >> $GITHUB_OUTPUT
            echo "lockfile=" >> $GITHUB_OUTPUT
          fi

      - name: Cache dependencies (if lockfile exists)
        if: ${{ steps.pm.outputs.lockfile != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            ~/.local/share/pnpm/store
            node_modules
          key: ${{ runner.os }}-${{ steps.pm.outputs.pm }}-${{ hashFiles(steps.pm.outputs.lockfile) }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.pm.outputs.pm }}-

      - name: Install dependencies
        run: |
          # Install based on detected PM
          if [ "${{ steps.pm.outputs.pm }}" = "pnpm" ]; then
            corepack enable
            pnpm install --frozen-lockfile
          elif [ "${{ steps.pm.outputs.pm }}" = "yarn" ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Build (Next.js static export)
        run: npm run build

      - name: Prepare Pages artifact
        run: |
          # Ensure out/ exists and CNAME is included if present in public/
          if [ -d out ]; then
            touch out/.nojekyll
            if [ -f public/CNAME ]; then
              cp public/CNAME out/CNAME
            fi
          else
            echo "Build output directory 'out' not found" && exit 1

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
